{"ast":null,"code":"var _jsxFileName = \"/app/public/src/RenderGraph.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport ReactFlow, { useNodesState, useEdgesState, Controls, updateEdge, addEdge, MiniMap, Background, getBezierPath, getEdgeCenter } from 'react-flow-renderer';\nimport './button_edge.css';\nimport \"./graph.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst UpdatableEdge = props => {\n  _s();\n\n  const foreignObjectSize = 40;\n  const [nodes, setNodes, onNodesChange] = useNodesState(props.initialNodes);\n  const [edges, setEdges, onEdgesChange] = useEdgesState(props.initialEdges);\n\n  const postDelete = async idxId => {\n    const edge = props.initialEdges[idxId];\n    await fetch('https://serverhackathon.prakshal.repl.co/deleteEdge', {\n      method: 'POST',\n      headers: {\n        'Accept': 'application/json',\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify([props.currIdx, edge])\n    }).then(response => response.json()).then(response => {\n      props.setDeployment(response);\n    });\n  };\n\n  const onEdgeClick = async (evt, id) => {\n    evt.stopPropagation();\n    const idxId = Number(id.split(\"-\")[1]);\n    console.log(props.initialEdges[idxId]);\n    await postDelete(idxId);\n  };\n\n  function CustomEdge(_ref) {\n    let {\n      id,\n      sourceX,\n      sourceY,\n      targetX,\n      targetY,\n      sourcePosition,\n      targetPosition,\n      style = {},\n      markerEnd\n    } = _ref;\n    const edgePath = getBezierPath({\n      sourceX,\n      sourceY,\n      sourcePosition,\n      targetX,\n      targetY,\n      targetPosition\n    });\n    const [edgeCenterX, edgeCenterY] = getEdgeCenter({\n      sourceX,\n      sourceY,\n      targetX,\n      targetY\n    });\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"path\", {\n        id: id,\n        style: style,\n        className: \"react-flow__edge-path\",\n        d: edgePath,\n        markerEnd: markerEnd\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"foreignObject\", {\n        width: foreignObjectSize,\n        height: foreignObjectSize,\n        x: edgeCenterX - foreignObjectSize / 2,\n        y: edgeCenterY - foreignObjectSize / 2,\n        className: \"edgebutton-foreignobject\",\n        requiredExtensions: \"http://www.w3.org/1999/xhtml\",\n        children: /*#__PURE__*/_jsxDEV(\"body\", {\n          children: /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"edgebutton\",\n            onClick: event => onEdgeClick(event, id, sourcePosition, targetPosition),\n            children: \"\\xD7\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 83,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 82,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true);\n  } // gets called after end of edge gets dragged to another source or target\n\n\n  const onEdgeUpdate = (oldEdge, newConnection) => setEdges(els => {\n    // Make API call here\n    return updateEdge(oldEdge, newConnection, els);\n  });\n\n  const onConnect = params => setEdges(els => addEdge(params, els));\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"backbtn\",\n      onClick: () => props.setDeployment(null),\n      children: /*#__PURE__*/_jsxDEV(\"b\", {\n        children: \"\\u2190\\xA0\\xA0Back\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 80\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(ReactFlow, {\n      nodes: nodes,\n      edges: edges,\n      onNodesChange: onNodesChange,\n      onEdgesChange: onEdgesChange,\n      snapToGrid: true,\n      onEdgeUpdate: onEdgeUpdate,\n      onConnect: onConnect,\n      edgeTypes: {\n        buttonedge: CustomEdge\n      },\n      fitView: true,\n      attributionPosition: \"top-right\",\n      style: {\n        width: \"100vw\",\n        height: \"100vh\"\n      },\n      children: [/*#__PURE__*/_jsxDEV(MiniMap, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 115,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Controls, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 116,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Background, {\n        variant: \"lines\",\n        gap: 50,\n        size: 0.5,\n        style: {\n          backgroundColor: \"#212121\"\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 117,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true);\n};\n\n_s(UpdatableEdge, \"LGlvb2RkHQi1LdQhfIf81+ZTXtg=\", false, function () {\n  return [useNodesState, useEdgesState];\n});\n\n_c = UpdatableEdge;\nexport default UpdatableEdge;\n\nvar _c;\n\n$RefreshReg$(_c, \"UpdatableEdge\");","map":{"version":3,"sources":["/app/public/src/RenderGraph.js"],"names":["React","useState","ReactFlow","useNodesState","useEdgesState","Controls","updateEdge","addEdge","MiniMap","Background","getBezierPath","getEdgeCenter","UpdatableEdge","props","foreignObjectSize","nodes","setNodes","onNodesChange","initialNodes","edges","setEdges","onEdgesChange","initialEdges","postDelete","idxId","edge","fetch","method","headers","body","JSON","stringify","currIdx","then","response","json","setDeployment","onEdgeClick","evt","id","stopPropagation","Number","split","console","log","CustomEdge","sourceX","sourceY","targetX","targetY","sourcePosition","targetPosition","style","markerEnd","edgePath","edgeCenterX","edgeCenterY","event","onEdgeUpdate","oldEdge","newConnection","els","onConnect","params","buttonedge","width","height","backgroundColor"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\n\nimport ReactFlow, { useNodesState, useEdgesState, Controls, updateEdge, addEdge, MiniMap, Background, getBezierPath, getEdgeCenter } from 'react-flow-renderer';\nimport './button_edge.css';\nimport \"./graph.css\";\n\n\n\nconst UpdatableEdge = (props) => {\n\n    const foreignObjectSize = 40;\n\n\n    const [nodes, setNodes, onNodesChange] = useNodesState(props.initialNodes);\n    const [edges, setEdges, onEdgesChange] = useEdgesState(props.initialEdges);\n\n    const postDelete = async (idxId) => {\n        const edge = props.initialEdges[idxId]\n        await fetch('https://serverhackathon.prakshal.repl.co/deleteEdge', {\n            method: 'POST',\n            headers: {\n                'Accept': 'application/json',\n                'Content-Type': 'application/json'\n            },\n            body: JSON.stringify([props.currIdx, edge])\n        })\n            .then(response => response.json())\n            .then(response => { props.setDeployment(response); })\n    }\n\n    const onEdgeClick = async (evt, id) => {\n        evt.stopPropagation();\n        const idxId = Number(id.split(\"-\")[1])\n        console.log(props.initialEdges[idxId]);\n        await postDelete(idxId)\n    };\n\n    function CustomEdge({\n        id,\n        sourceX,\n        sourceY,\n        targetX,\n        targetY,\n        sourcePosition,\n        targetPosition,\n        style = {},\n        markerEnd,\n        \n    }) {\n        const edgePath = getBezierPath({\n            sourceX,\n            sourceY,\n            sourcePosition,\n            targetX,\n            targetY,\n            targetPosition,\n        });\n        const [edgeCenterX, edgeCenterY] = getEdgeCenter({\n            sourceX,\n            sourceY,\n            targetX,\n            targetY,\n        });\n\n        return (\n            <>\n                <path\n                    id={id}\n                    style={style}\n                    className=\"react-flow__edge-path\"\n                    d={edgePath}\n                    markerEnd={markerEnd}\n                />\n                <foreignObject\n                    width={foreignObjectSize}\n                    height={foreignObjectSize}\n                    x={edgeCenterX - foreignObjectSize / 2}\n                    y={edgeCenterY - foreignObjectSize / 2}\n                    className=\"edgebutton-foreignobject\"\n                    requiredExtensions=\"http://www.w3.org/1999/xhtml\"\n                >\n                    <body>\n                        <button className=\"edgebutton\" onClick={(event) => onEdgeClick(event, id, sourcePosition, targetPosition)}>\n                            ×\n                        </button>\n                    </body>\n                </foreignObject>\n            </>\n        );\n    }\n\n    // gets called after end of edge gets dragged to another source or target\n    const onEdgeUpdate = (oldEdge, newConnection) => setEdges((els) => {\n        // Make API call here\n        return updateEdge(oldEdge, newConnection, els);\n    });\n    const onConnect = (params) => setEdges((els) => addEdge(params, els));\n\n    return (\n        <>\n            <div className=\"backbtn\" onClick={() => props.setDeployment(null)}><b>&#8592;&nbsp;&nbsp;Back</b></div>\n            <ReactFlow\n                nodes={nodes}\n                edges={edges}\n                onNodesChange={onNodesChange}\n                onEdgesChange={onEdgesChange}\n                snapToGrid\n                onEdgeUpdate={onEdgeUpdate}\n                onConnect={onConnect}\n                edgeTypes={{ buttonedge: CustomEdge }}\n                fitView\n                attributionPosition=\"top-right\"\n                style={{ width: \"100vw\", height: \"100vh\" }}\n            >\n                <MiniMap />\n                <Controls />\n                <Background variant=\"lines\" gap={50} size={0.5} style={{ backgroundColor: \"#212121\" }} />\n            </ReactFlow>\n        </>\n    );\n};\n\nexport default UpdatableEdge;\n"]},"metadata":{},"sourceType":"module"}