{"ast":null,"code":"import { createContext as createContext$1, useRef, createElement, useContext, useMemo } from 'react';\n\nfunction createContext() {\n  var ZustandContext = createContext$1(void 0);\n\n  var Provider = function Provider(_ref) {\n    var initialStore = _ref.initialStore,\n        createStore = _ref.createStore,\n        children = _ref.children;\n    var storeRef = useRef();\n\n    if (!storeRef.current) {\n      if (initialStore) {\n        console.warn(\"Provider initialStore is deprecated and will be removed in the next version.\");\n\n        if (!createStore) {\n          createStore = function createStore() {\n            return initialStore;\n          };\n        }\n      }\n\n      storeRef.current = createStore();\n    }\n\n    return createElement(ZustandContext.Provider, {\n      value: storeRef.current\n    }, children);\n  };\n\n  var useStore = function useStore(selector) {\n    var equalityFn = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : Object.is;\n    var useProviderStore = useContext(ZustandContext);\n\n    if (!useProviderStore) {\n      throw new Error(\"Seems like you have not used zustand provider as an ancestor.\");\n    }\n\n    return useProviderStore(selector, equalityFn);\n  };\n\n  var useStoreApi = function useStoreApi() {\n    var useProviderStore = useContext(ZustandContext);\n\n    if (!useProviderStore) {\n      throw new Error(\"Seems like you have not used zustand provider as an ancestor.\");\n    }\n\n    return useMemo(function () {\n      return {\n        getState: useProviderStore.getState,\n        setState: useProviderStore.setState,\n        subscribe: useProviderStore.subscribe,\n        destroy: useProviderStore.destroy\n      };\n    }, [useProviderStore]);\n  };\n\n  return {\n    Provider: Provider,\n    useStore: useStore,\n    useStoreApi: useStoreApi\n  };\n}\n\nexport { createContext as default };","map":{"version":3,"sources":["/home/git/SkiffUI/app/node_modules/zustand/esm/context.js"],"names":["createContext","createContext$1","useRef","createElement","useContext","useMemo","ZustandContext","Provider","initialStore","createStore","children","storeRef","current","console","warn","value","useStore","selector","equalityFn","Object","is","useProviderStore","Error","useStoreApi","getState","setState","subscribe","destroy","default"],"mappings":"AAAA,SAASA,aAAa,IAAIC,eAA1B,EAA2CC,MAA3C,EAAmDC,aAAnD,EAAkEC,UAAlE,EAA8EC,OAA9E,QAA6F,OAA7F;;AAEA,SAASL,aAAT,GAAyB;AACvB,MAAMM,cAAc,GAAGL,eAAe,CAAC,KAAK,CAAN,CAAtC;;AACA,MAAMM,QAAQ,GAAG,SAAXA,QAAW,OAIX;AAAA,QAHJC,YAGI,QAHJA,YAGI;AAAA,QAFJC,WAEI,QAFJA,WAEI;AAAA,QADJC,QACI,QADJA,QACI;AACJ,QAAMC,QAAQ,GAAGT,MAAM,EAAvB;;AACA,QAAI,CAACS,QAAQ,CAACC,OAAd,EAAuB;AACrB,UAAIJ,YAAJ,EAAkB;AAChBK,QAAAA,OAAO,CAACC,IAAR,CAAa,8EAAb;;AACA,YAAI,CAACL,WAAL,EAAkB;AAChBA,UAAAA,WAAW,GAAG;AAAA,mBAAMD,YAAN;AAAA,WAAd;AACD;AACF;;AACDG,MAAAA,QAAQ,CAACC,OAAT,GAAmBH,WAAW,EAA9B;AACD;;AACD,WAAON,aAAa,CAACG,cAAc,CAACC,QAAhB,EAA0B;AAAEQ,MAAAA,KAAK,EAAEJ,QAAQ,CAACC;AAAlB,KAA1B,EAAuDF,QAAvD,CAApB;AACD,GAhBD;;AAiBA,MAAMM,QAAQ,GAAG,SAAXA,QAAW,CAACC,QAAD,EAAsC;AAAA,QAA3BC,UAA2B,uEAAdC,MAAM,CAACC,EAAO;AACrD,QAAMC,gBAAgB,GAAGjB,UAAU,CAACE,cAAD,CAAnC;;AACA,QAAI,CAACe,gBAAL,EAAuB;AACrB,YAAM,IAAIC,KAAJ,CAAU,+DAAV,CAAN;AACD;;AACD,WAAOD,gBAAgB,CAACJ,QAAD,EAAWC,UAAX,CAAvB;AACD,GAND;;AAOA,MAAMK,WAAW,GAAG,SAAdA,WAAc,GAAM;AACxB,QAAMF,gBAAgB,GAAGjB,UAAU,CAACE,cAAD,CAAnC;;AACA,QAAI,CAACe,gBAAL,EAAuB;AACrB,YAAM,IAAIC,KAAJ,CAAU,+DAAV,CAAN;AACD;;AACD,WAAOjB,OAAO,CAAC;AAAA,aAAO;AACpBmB,QAAAA,QAAQ,EAAEH,gBAAgB,CAACG,QADP;AAEpBC,QAAAA,QAAQ,EAAEJ,gBAAgB,CAACI,QAFP;AAGpBC,QAAAA,SAAS,EAAEL,gBAAgB,CAACK,SAHR;AAIpBC,QAAAA,OAAO,EAAEN,gBAAgB,CAACM;AAJN,OAAP;AAAA,KAAD,EAKV,CAACN,gBAAD,CALU,CAAd;AAMD,GAXD;;AAYA,SAAO;AACLd,IAAAA,QAAQ,EAARA,QADK;AAELS,IAAAA,QAAQ,EAARA,QAFK;AAGLO,IAAAA,WAAW,EAAXA;AAHK,GAAP;AAKD;;AAED,SAASvB,aAAa,IAAI4B,OAA1B","sourcesContent":["import { createContext as createContext$1, useRef, createElement, useContext, useMemo } from 'react';\n\nfunction createContext() {\n  const ZustandContext = createContext$1(void 0);\n  const Provider = ({\n    initialStore,\n    createStore,\n    children\n  }) => {\n    const storeRef = useRef();\n    if (!storeRef.current) {\n      if (initialStore) {\n        console.warn(\"Provider initialStore is deprecated and will be removed in the next version.\");\n        if (!createStore) {\n          createStore = () => initialStore;\n        }\n      }\n      storeRef.current = createStore();\n    }\n    return createElement(ZustandContext.Provider, { value: storeRef.current }, children);\n  };\n  const useStore = (selector, equalityFn = Object.is) => {\n    const useProviderStore = useContext(ZustandContext);\n    if (!useProviderStore) {\n      throw new Error(\"Seems like you have not used zustand provider as an ancestor.\");\n    }\n    return useProviderStore(selector, equalityFn);\n  };\n  const useStoreApi = () => {\n    const useProviderStore = useContext(ZustandContext);\n    if (!useProviderStore) {\n      throw new Error(\"Seems like you have not used zustand provider as an ancestor.\");\n    }\n    return useMemo(() => ({\n      getState: useProviderStore.getState,\n      setState: useProviderStore.setState,\n      subscribe: useProviderStore.subscribe,\n      destroy: useProviderStore.destroy\n    }), [useProviderStore]);\n  };\n  return {\n    Provider,\n    useStore,\n    useStoreApi\n  };\n}\n\nexport { createContext as default };\n"]},"metadata":{},"sourceType":"module"}